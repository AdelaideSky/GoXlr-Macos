[package]
name = "goxlr-daemon"
version = "0.10.2"
edition = "2021"
authors = ["Nathan Adams <dinnerbone@dinnerbone.com>", "Craig McLure <craig@mclure.net>", "Lars MÃ¼hlbauer <lm41@dismail.de>"]
description = "Allows control of a TC-Helicon GoXLR or GoXLR Mini, by maintaining an interaction with it over USB in the background."
repository = "https://github.com/GoXLR-on-Linux/GoXLR-Utility"
license = "MIT"
categories = ["hardware-support", "command-line-utilities"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
goxlr-usb = { path = "../usb" }
goxlr-ipc = { path = "../ipc" }
goxlr-types = { path = "../types" }
goxlr-audio = { path = "../audio" }
goxlr-profile-loader = { path = "../profile" }
goxlr-scribbles = { path = "../scribbles" }
simplelog = "0.12.0"
tokio = { version = "1.23.0", features = ["full"] }
tokio-serde = "0.8.0"
log = "0.4.17"
anyhow = "1.0.68"
strum = { version = "0.24.1" }
enumset = "1.0.12"
serde = { version = "1.0.152", features = ["derive"] }
serde_json = { version = "1.0.91" }
directories = "4.0.1"
byteorder = "1.4.3"
enum-map = "2.4.2"
futures = "0.3.25"
ritelinked = "0.3.2"
clap = { version = "4.0.32", features = ["derive"] }
opener = "0.5.0"
regex = "1.7.0"
chrono = "0.4.23"
glob = "0.3.0"
cfg-if = "1.0.0"
lazy_static = "1.4.0"

interprocess = { version = "1.2.1", features = ["tokio_support"] }

notify = "5.0.0"
json-patch = "0.3.0"

## HTTPd Server
actix = "0.13.0"
actix-web-actors = "4.1.0"

# All we really need from actix-web are macros and compression, TLS and cookies aren't required
actix-web = { version = "4.2.1", default-features = false, features = ["macros", "compress-brotli", "compress-gzip" ] }
actix-cors = "0.6.4"
mime_guess = "2.0.4"
include_dir = "0.7.3"

[target.'cfg(target_family = "unix")'.dependencies]
nix = { version = "0.26.1", features = ["user"] }

# Under Linux, we use ksni for our tray icon..
[target.'cfg(target_os = "linux")'.dependencies]
ksni = "0.2.0"
rust-ini = "0.18.0"
rand = "0.8.5"

# Under Windows and MacOS, we use tao's tray feature
[target.'cfg(target_os = "windows")'.dependencies]
tao = { version = "0.15.8", features = ["tray"] }
image = "0.24.5"
sysinfo = "0.27.1"
winrt-notification = "0.5.1"
winreg = "0.10.1"
mslnk = "0.1.8"
dunce = "1.0.3"
win-win = "0.1.1"
winapi = { version = "0.3.9", features = ["winuser"] }

[target.'cfg(target_os = "macos")'.dependencies]
tao = { version = "0.15.8", features = ["tray"] }
image = "0.24.5"

[build-dependencies]
clap = { version = "4.0.32", features = ["derive"] }
clap_complete = "4.0.7"
directories = "4.0.1"

[target.'cfg(target_os = "windows")'.build-dependencies]
windres = "0.2.2"

[package.metadata.deb]
name = "goxlr-utility"
assets = [
    ["../target/release/goxlr-daemon", "usr/bin/", "755"],
    ["../target/release/goxlr-client", "usr/bin/", "755"],
    ["../target/release/goxlr-defaults", "usr/bin/", "755"],
    ["../target/release/goxlr-launcher", "usr/bin/", "755"],
    ["../50-goxlr.rules", "etc/udev/rules.d/", "644"],
    ["../daemon/resources/goxlr-utility.png", "usr/share/icons/hicolor/48x48/apps/", "644"],
    ["../daemon/resources/goxlr-utility-large.png", "usr/share/pixmaps/goxlr-utility.png", "644"],
    ["../daemon/resources/goxlr-utility.svg", "usr/share/icons/hicolor/scalable/apps/", "644"],
    ["../daemon/resources/goxlr-utility.desktop", "usr/share/applications/", "644"],
    ["../deployment/deb/goxlr-client.bash", "usr/share/bash-completion/completions/", "644"],
    ["../deployment/deb/goxlr-client.fish", "usr/share/fish/vendor_completions.d/", "644"],
    ["../deployment/deb/_goxlr-client", "usr/share/zsh/vendor-completions/", "644"],
    ["../deployment/deb/goxlr-daemon.bash", "usr/share/bash-completion/completions/", "644"],
    ["../deployment/deb/goxlr-daemon.fish", "usr/share/fish/vendor_completions.d/", "644"],
    ["../deployment/deb/_goxlr-daemon", "usr/share/zsh/vendor-completions/", "644"],
]
maintainer-scripts = "../ci/distrib/DEBIAN/"
section = "sound"
priority = "optional"
depends = "$auto"
extended-description = """\
A utility for monitoring and controlling a TC-Helicon GoXLR or GoXLR Mini.
"""

## cargo generate-rpm support..
[package.metadata.generate-rpm]
name = "goxlr-utility"
assets = [
    { source = "../target/release/goxlr-daemon", dest = "/usr/bin/goxlr-daemon", mode = "0755" },
    { source = "../target/release/goxlr-client", dest = "/usr/bin/goxlr-client", mode = "0755" },
    { source = "../target/release/goxlr-defaults", dest = "/usr/bin/goxlr-defaults", mode = "0755" },
    { source = "../target/release/goxlr-launcher", dest = "/usr/bin/goxlr-launcher", mode = "0755" },
    { source = "../50-goxlr.rules", dest = "/etc/udev/rules.d/50-goxlr.rules", mode = "0644" },
    { source = "../daemon/resources/goxlr-utility.png", dest = "/usr/share/icons/hicolor/48x48/apps/goxlr-utility.png", mode = "0644" },
    { source = "../daemon/resources/goxlr-utility-large.png", dest = "/usr/share/pixmaps/goxlr-utility.png", mode = "0644" },
    { source = "../daemon/resources/goxlr-utility.svg", dest = "/usr/share/icons/hicolor/scalable/apps/goxlr-utility.svg", mode = "0644" },
    { source = "../daemon/resources/goxlr-utility.desktop", dest = "/usr/share/applications/goxlr-utility.desktop", mode = "0644" },
    { source = "../deployment/deb/goxlr-client.bash", dest = "/usr/share/bash-completion/completions/goxlr-client.bash", mode = "0644" },
    { source = "../deployment/deb/goxlr-client.fish", dest = "/usr/share/fish/vendor_completions.d/goxlr-client.fish", mode = "0644" },
    { source = "../deployment/deb/_goxlr-client", dest = "/usr/share/zsh/vendor-completions/_goxlr-client", mode = "0644" },
    { source = "../deployment/deb/goxlr-daemon.bash", dest = "/usr/share/bash-completion/completions/goxlr-daemon.bash", mode = "0644" },
    { source = "../deployment/deb/goxlr-daemon.fish", dest = "/usr/share/fish/vendor_completions.d/goxlr-daemon.fish", mode = "0644" },
    { source = "../deployment/deb/_goxlr-daemon", dest = "/usr/share/zsh/vendor-completions/_goxlr-daemon", mode = "0644" },
]

# Tiny scriptlet, should reload udev.
post_install_script = """
udevadm control --reload-rules
udevadm trigger
"""

#release = "1"

# Because we build under Ubuntu in CI, generate-rpm is unable to calculate the dependencies required (no access
# to rpm / yum), so we need to disable the auto and specify dependencies manually.
auto-req = "no"

[package.metadata.generate-rpm.requires]
# It should be noted, that bzip2 and libusb get statically linked against the binary, so they're not actually
# required, this leaves us with dbus and pulseaudio libs :)
dbus-libs = "*"
pulseaudio-libs = "*"
